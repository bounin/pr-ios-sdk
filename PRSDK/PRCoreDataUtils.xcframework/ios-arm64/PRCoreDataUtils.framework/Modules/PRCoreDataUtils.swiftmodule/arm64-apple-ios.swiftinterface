// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PRCoreDataUtils
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreData
import Foundation
@_exported import PRCoreDataUtils
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CoreData.NSManagedObjectContext {
  public func performAndWaitAndSave<T>(_ block: () throws -> T) rethrows -> T
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func performAndSave<T>(schedule: CoreData.NSManagedObjectContext.ScheduledTaskType = .immediate, _ block: @escaping () throws -> T) async rethrows -> T
  #endif
}
extension CoreData.NSManagedObjectContext {
  public func object<T>(predicate: Foundation.NSPredicate?) -> T where T : CoreData.NSManagedObject
  public func object<T>(predicate: Foundation.NSPredicate?) -> T? where T : CoreData.NSManagedObject
}
extension CoreData.NSManagedObjectContext {
  public func object(entityName: Swift.String, predicate: Foundation.NSPredicate? = nil, sortDescriptors: [Foundation.NSSortDescriptor]? = nil) -> CoreData.NSManagedObject?
}
extension Swift.Dictionary {
  public func castInt<T>(_ key: Key, defaultValue: T = 0) -> T where T : Swift.FixedWidthInteger, T : Swift.SignedInteger
  public func castInt<T>(_ keys: [Key], defaultValue: T = 0) -> T where T : Swift.FixedWidthInteger, T : Swift.SignedInteger
}
extension Swift.FixedWidthInteger {
  public func cast<T>() -> T where T : Swift.FixedWidthInteger
}
@objc extension CoreData.NSManagedObject {
  @objc dynamic public class var entityName: Swift.String {
    @objc get
  }
  @objc dynamic public class func itemsCount(context: CoreData.NSManagedObjectContext, predicate: Foundation.NSPredicate? = nil) -> Swift.UInt
  @objc dynamic public var managedObjectContext_: CoreData.NSManagedObjectContext {
    @objc get
  }
  @objc dynamic public var entityName: Swift.String {
    @objc get
  }
  @objc dynamic public var isAvailable: Swift.Bool {
    @objc get
  }
  @objc dynamic public func restore(context: CoreData.NSManagedObjectContext) -> Self
  @objc dynamic public func delete()
}
public enum UpdatableMOError : Swift.Error {
  case invalidPayload
  public static func == (a: PRCoreDataUtils.UpdatableMOError, b: PRCoreDataUtils.UpdatableMOError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol UpdatableMO {
  associatedtype Payload
  static func payload(with info: [Swift.String : Any]) -> Self.Payload?
  func update(payload: Self.Payload)
}
public protocol StringIdentifiable {
  var id: Swift.String { get }
}
extension PRCoreDataUtils.UpdatableMO {
  public func update(info: [Swift.String : Any]) throws
}
extension PRCoreDataUtils.UpdatableMO where Self : PRCoreDataUtils.IdentifiableMO, Self.Payload : PRCoreDataUtils.StringIdentifiable {
  public static func object(info: [Swift.String : Any], context: CoreData.NSManagedObjectContext) -> Self?
  public static func object(payload: Self.Payload, context: CoreData.NSManagedObjectContext) -> Self
}
extension CoreData.NSManagedObjectContext {
  public func fetchItems<T>(predicate: Foundation.NSPredicate? = nil, sortDecriptors: [Foundation.NSSortDescriptor]? = nil, limit: Swift.UInt = .max) -> [T]? where T : CoreData.NSManagedObject
  public func fetchItem<T>(predicate: Foundation.NSPredicate) -> T? where T : CoreData.NSManagedObject
  public func fetchAndDeleteItems<T>(request: CoreData.NSFetchRequest<T>) -> [T] where T : CoreData.NSManagedObject
  public func deleteItems<T>(request: CoreData.NSFetchRequest<T>) where T : CoreData.NSManagedObject
}
@propertyWrapper public struct RawRepresentableCDPrimitive<Value> where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int {
  public typealias Primitive = Swift.FixedWidthInteger
  public static subscript<T>(_enclosingInstance instance: T, wrapped wrappedKeyPath: Swift.ReferenceWritableKeyPath<T, Value>, storage storageKeyPath: Swift.ReferenceWritableKeyPath<T, PRCoreDataUtils.RawRepresentableCDPrimitive<Value>>) -> Value where T : CoreData.NSManagedObject {
    get
    set
  }
  @available(*, unavailable)
  public var wrappedValue: Value {
    get
    set
  }
  public init(key: Swift.String, primitiveType: any PRCoreDataUtils.RawRepresentableCDPrimitive<Value>.Primitive.Type)
}
public protocol IdentifiableMO : CoreData.NSManagedObject {
  static func object(id: Swift.String, context: CoreData.NSManagedObjectContext) -> Self
  var id: Swift.String { get set }
}
extension PRCoreDataUtils.IdentifiableMO {
  public static func object(id: Swift.String, context: CoreData.NSManagedObjectContext) -> Self
  public static func object(id: Swift.String, context: CoreData.NSManagedObjectContext) -> Self?
}
extension PRCoreDataUtils.UpdatableMOError : Swift.Equatable {}
extension PRCoreDataUtils.UpdatableMOError : Swift.Hashable {}
